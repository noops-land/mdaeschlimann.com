// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p4LaNHsjacaypvn2fBdVp1
// Component: T0fwWsOABjK
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: JUigd8V3ygI/component
import { PhoneInput } from "../../PhoneInput"; // plasmic-import: _M8ybQ-1SP/codeComponent
import Checkbox from "../../Checkbox"; // plasmic-import: W-4lJh8DJRw/component
import Button from "../../Button"; // plasmic-import: a1_SE8wfWDQ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_mdaeschlimann_com.module.css"; // plasmic-import: p4LaNHsjacaypvn2fBdVp1/projectcss
import sty from "./PlasmicForm.module.css"; // plasmic-import: T0fwWsOABjK/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 8Kq5biUcOP2KT1/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: a6P6rGXfRam2Qq/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 7GBqP4yc8GG/icon

export type PlasmicForm__VariantMembers = {
  merci: "merci";
};
export type PlasmicForm__VariantsArgs = {
  merci?: SingleBooleanChoiceArg<"merci">;
};
type VariantPropType = keyof PlasmicForm__VariantsArgs;
export const PlasmicForm__VariantProps = new Array<VariantPropType>("merci");

export type PlasmicForm__ArgsType = {
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
};
type ArgPropType = keyof PlasmicForm__ArgsType;
export const PlasmicForm__ArgProps = new Array<ArgPropType>(
  "startIcon",
  "endIcon"
);

export type PlasmicForm__OverridesType = {
  root?: p.Flex<"form">;
  prenom?: p.Flex<typeof TextInput>;
  nom?: p.Flex<typeof TextInput>;
  email?: p.Flex<typeof TextInput>;
  ville?: p.Flex<typeof TextInput>;
  freeBox?: p.Flex<"div">;
  startIconContainer?: p.Flex<"div">;
  phoneInput?: p.Flex<typeof PhoneInput>;
  endIconContainer?: p.Flex<"div">;
  checkbox?: p.Flex<typeof Checkbox>;
  text?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultFormProps {
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  merci?: SingleBooleanChoiceArg<"merci">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicForm__RenderFunc(props: {
  variants: PlasmicForm__VariantsArgs;
  args: PlasmicForm__ArgsType;
  overrides: PlasmicForm__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "merci",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.merci : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  return (
    (hasVariant($state, "merci", "merci") ? true : true) ? (
      <p.Stack
        as={"form"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        action={"https://mda.cloudcall.fr/webhook/mda-newsletter" as const}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          { [sty.rootmerci]: hasVariant($state, "merci", "merci") }
        )}
        method={"post" as const}
      >
        <TextInput
          data-plasmic-name={"prenom"}
          data-plasmic-override={overrides.prenom}
          className={classNames("__wab_instance", sty.prenom)}
          hover={"Veuillez indiquer votre prénom (requis)" as const}
          name={"prenom" as const}
          placeholder={"Prénom*" as const}
          required={true}
        />

        <TextInput
          data-plasmic-name={"nom"}
          data-plasmic-override={overrides.nom}
          className={classNames("__wab_instance", sty.nom)}
          hover={"Veuillez indiquer votre nom (requis)" as const}
          name={"nom" as const}
          placeholder={"Nom*" as const}
          required={true}
        />

        <TextInput
          data-plasmic-name={"email"}
          data-plasmic-override={overrides.email}
          className={classNames("__wab_instance", sty.email)}
          hover={"Veuillez indiquer votre adresse email (requis)" as const}
          name={"email" as const}
          placeholder={"Email*" as const}
          required={true}
          type={"email" as const}
        />

        <TextInput
          data-plasmic-name={"ville"}
          data-plasmic-override={overrides.ville}
          className={classNames("__wab_instance", sty.ville)}
          hover={"Veuillez indiquer votre ville" as const}
          name={"ville" as const}
          placeholder={"Ville" as const}
        />

        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
          title={"Veuillez indiquer votre numéro de téléphone" as const}
        >
          {true ? (
            <div
              data-plasmic-name={"startIconContainer"}
              data-plasmic-override={overrides.startIconContainer}
              className={classNames(projectcss.all, sty.startIconContainer)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <SearchsvgIcon
                    className={classNames(projectcss.all, sty.svg__wj3Qq)}
                    role={"img"}
                  />
                ),

                value: args.startIcon
              })}
            </div>
          ) : null}

          <PhoneInput
            data-plasmic-name={"phoneInput"}
            data-plasmic-override={overrides.phoneInput}
            className={classNames("__wab_instance", sty.phoneInput)}
            name={"telephone" as const}
            placeholder={"Téléphone" as const}
          />

          {true ? (
            <div
              data-plasmic-name={"endIconContainer"}
              data-plasmic-override={overrides.endIconContainer}
              className={classNames(projectcss.all, sty.endIconContainer)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg___8IvGw)}
                    role={"img"}
                  />
                ),

                value: args.endIcon
              })}
            </div>
          ) : null}
        </div>

        <Checkbox
          data-plasmic-name={"checkbox"}
          data-plasmic-override={overrides.checkbox}
          className={classNames("__wab_instance", sty.checkbox)}
          name={"checked" as const}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {
                  "J'accepte de recevoir votre newsletter et confirme avoir pris connaissance de vos "
                }
              </React.Fragment>
              {
                <p.PlasmicLink
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link
                  )}
                  component={Link}
                  href={"/mentions-legales" as const}
                  platform={"nextjs"}
                >
                  {"mentions légales et politique de confidentialité"}
                </p.PlasmicLink>
              }
              <React.Fragment>{"."}</React.Fragment>
            </React.Fragment>
          </div>
        </Checkbox>

        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
        >
          {"Valider"}
        </Button>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "prenom",
    "nom",
    "email",
    "ville",
    "freeBox",
    "startIconContainer",
    "phoneInput",
    "endIconContainer",
    "checkbox",
    "text",
    "link",
    "button"
  ],
  prenom: ["prenom"],
  nom: ["nom"],
  email: ["email"],
  ville: ["ville"],
  freeBox: ["freeBox", "startIconContainer", "phoneInput", "endIconContainer"],
  startIconContainer: ["startIconContainer"],
  phoneInput: ["phoneInput"],
  endIconContainer: ["endIconContainer"],
  checkbox: ["checkbox", "text", "link"],
  text: ["text", "link"],
  link: ["link"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "form";
  prenom: typeof TextInput;
  nom: typeof TextInput;
  email: typeof TextInput;
  ville: typeof TextInput;
  freeBox: "div";
  startIconContainer: "div";
  phoneInput: typeof PhoneInput;
  endIconContainer: "div";
  checkbox: typeof Checkbox;
  text: "div";
  link: "a";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicForm__VariantsArgs;
    args?: PlasmicForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicForm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicForm__ArgProps,
          internalVariantPropNames: PlasmicForm__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicForm";
  } else {
    func.displayName = `PlasmicForm.${nodeName}`;
  }
  return func;
}

export const PlasmicForm = Object.assign(
  // Top-level PlasmicForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    prenom: makeNodeComponent("prenom"),
    nom: makeNodeComponent("nom"),
    email: makeNodeComponent("email"),
    ville: makeNodeComponent("ville"),
    freeBox: makeNodeComponent("freeBox"),
    startIconContainer: makeNodeComponent("startIconContainer"),
    phoneInput: makeNodeComponent("phoneInput"),
    endIconContainer: makeNodeComponent("endIconContainer"),
    checkbox: makeNodeComponent("checkbox"),
    text: makeNodeComponent("text"),
    link: makeNodeComponent("link"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicForm
    internalVariantProps: PlasmicForm__VariantProps,
    internalArgProps: PlasmicForm__ArgProps
  }
);

export default PlasmicForm;
/* prettier-ignore-end */
