// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: p4LaNHsjacaypvn2fBdVp1
// Component: SRL_deXEpapHr
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Form from "../../Form"; // plasmic-import: T0fwWsOABjK/component

import { useScreenVariants as useScreenVariants_84TpjeQmcocO } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 8_4TpjeQmcocO/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_mdaeschlimann_com.module.css"; // plasmic-import: p4LaNHsjacaypvn2fBdVp1/projectcss
import sty from "./PlasmicAccueil.module.css"; // plasmic-import: SRL_deXEpapHr/css

import FacebookIcon from "./icons/PlasmicIcon__Facebook"; // plasmic-import: bS4_04WE0n/icon
import InstagramIcon from "./icons/PlasmicIcon__Instagram"; // plasmic-import: CLNhNHAXHb/icon
import TwitterIcon from "./icons/PlasmicIcon__Twitter"; // plasmic-import: xNSgQQVONs/icon
import LinkedinIcon from "./icons/PlasmicIcon__Linkedin"; // plasmic-import: R0S2wicba9/icon

export type PlasmicAccueil__VariantMembers = {
  merci: "merci";
};
export type PlasmicAccueil__VariantsArgs = {
  merci?: SingleBooleanChoiceArg<"merci">;
};
type VariantPropType = keyof PlasmicAccueil__VariantsArgs;
export const PlasmicAccueil__VariantProps = new Array<VariantPropType>("merci");

export type PlasmicAccueil__ArgsType = {};
type ArgPropType = keyof PlasmicAccueil__ArgsType;
export const PlasmicAccueil__ArgProps = new Array<ArgPropType>();

export type PlasmicAccueil__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  h1?: p.Flex<"h1">;
  h2?: p.Flex<"h2">;
  form?: p.Flex<typeof Form>;
};

export interface DefaultAccueilProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAccueil__RenderFunc(props: {
  variants: PlasmicAccueil__VariantsArgs;
  args: PlasmicAccueil__ArgsType;
  overrides: PlasmicAccueil__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "merci",
        type: "private",
        variableType: "variant",
        initFunc: true ? ($props, $state, $ctx) => $props.merci : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_84TpjeQmcocO()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicAccueil.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicAccueil.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicAccueil.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicAccueil.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicAccueil.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicAccueil.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicAccueil.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicAccueil.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicAccueil.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            { [sty.rootmerci]: hasVariant($state, "merci", "merci") }
          )}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__okzgc, {
              [sty.freeBoxmerci__okzgcNshOl]: hasVariant(
                $state,
                "merci",
                "merci"
              )
            })}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={
                "Marie-Do Aeschlimann, Vice-Présidente de la Région Île-de-France, Adjointe au Maire d'Asnières-sur-Seine, Mon action pour Asnières et l'Île-de-France" as const
              }
              className={classNames(sty.img, {
                [sty.imgmerci]: hasVariant($state, "merci", "merci")
              })}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("100%" as const)
                  : ("60%" as const)
              }
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"eager" as const}
              src={{
                src: "/plasmic/mdaeschlimann_com/images/marieDoAeschlimannAction.jpeg",
                fullWidth: 4167,
                fullHeight: 2500,
                aspectRatio: undefined
              }}
            />
          </div>

          <div
            className={classNames(projectcss.all, sty.freeBox__wzPnx, {
              [sty.freeBoxmerci__wzPnxNshOl]: hasVariant(
                $state,
                "merci",
                "merci"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oPb7
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1,
                      { [sty.h1merci]: hasVariant($state, "merci", "merci") }
                    )}
                  >
                    {hasVariant($state, "merci", "merci")
                      ? "Merci !"
                      : "Inscrivez-vous à ma newsletter\npour rester informé(e) :"}
                  </h1>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>

            {(hasVariant($state, "merci", "merci") ? true : true) ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lbqf0,
                  {
                    [sty.textmerci__lbqf0NshOl]: hasVariant(
                      $state,
                      "merci",
                      "merci"
                    )
                  }
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2,
                        { [sty.h2merci]: hasVariant($state, "merci", "merci") }
                      )}
                    >
                      {hasVariant($state, "merci", "merci")
                        ? "Vous allez bientôt recevoir\nun email de confirmation."
                        : "Vous allez bientôt recevoir un email de confirmation"}
                    </h2>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            ) : null}
            {(hasVariant($state, "merci", "merci") ? true : true) ? (
              <Form
                data-plasmic-name={"form"}
                data-plasmic-override={overrides.form}
                className={classNames("__wab_instance", sty.form, {
                  [sty.formmerci]: hasVariant($state, "merci", "merci")
                })}
              />
            ) : null}
          </div>

          <div
            className={classNames(projectcss.all, sty.freeBox___2Zx4T, {
              [sty.freeBoxmerci___2Zx4TNshOl]: hasVariant(
                $state,
                "merci",
                "merci"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9IJVq
              )}
            >
              {"Suivez mon actualité : "}
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bpy69)}
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__vfRrI
                )}
                component={Link}
                href={"https://facebook.com/mariedo.aeschlimann" as const}
                platform={"nextjs"}
                target={"_blank" as const}
              >
                <FacebookIcon
                  className={classNames(projectcss.all, sty.svg__swCyq)}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__ya6Fi
                )}
                component={Link}
                href={"https://www.instagram.com/mariedoaeschlimann" as const}
                platform={"nextjs"}
                target={"_blank" as const}
              >
                <InstagramIcon
                  className={classNames(projectcss.all, sty.svg__miXy0)}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___5QWeH
                )}
                component={Link}
                href={"https://twitter.com/MDoAeschlimann" as const}
                platform={"nextjs"}
                target={"_blank" as const}
              >
                <TwitterIcon
                  className={classNames(projectcss.all, sty.svg___8Uc2N)}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__osPQ
                )}
                component={Link}
                href={
                  "https://www.linkedin.com/in/marie-do-aeschlimann-36a4b576" as const
                }
                platform={"nextjs"}
                target={"_blank" as const}
              >
                <LinkedinIcon
                  className={classNames(projectcss.all, sty.svg__ys5SU)}
                  role={"img"}
                />
              </p.PlasmicLink>
            </p.Stack>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "h1", "h2", "form"],
  img: ["img"],
  h1: ["h1"],
  h2: ["h2"],
  form: ["form"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  h1: "h1";
  h2: "h2";
  form: typeof Form;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccueil__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccueil__VariantsArgs;
    args?: PlasmicAccueil__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccueil__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAccueil__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAccueil__ArgProps,
          internalVariantPropNames: PlasmicAccueil__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAccueil__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccueil";
  } else {
    func.displayName = `PlasmicAccueil.${nodeName}`;
  }
  return func;
}

export const PlasmicAccueil = Object.assign(
  // Top-level PlasmicAccueil renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h1: makeNodeComponent("h1"),
    h2: makeNodeComponent("h2"),
    form: makeNodeComponent("form"),

    // Metadata about props expected for PlasmicAccueil
    internalVariantProps: PlasmicAccueil__VariantProps,
    internalArgProps: PlasmicAccueil__ArgProps,

    // Page metadata
    pageMetadata: {
      title:
        "Marie-Do Aeschlimann - Mon action pour Asnières et l'Île-de-France",
      description:
        "Vice-Présidente de la Région Île-de-France, Adjointe au Maire d'Asnières-sur-Seine",
      ogImageSrc:
        "https://site-assets.plasmic.app/4d1e01689ca77c10adf564790dbd0cd9.jpg",
      canonical: "https://mdaeschlimann.com"
    }
  }
);

export default PlasmicAccueil;
/* prettier-ignore-end */
